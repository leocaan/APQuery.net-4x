// <auto-generated />
namespace QueryFramework.Internal
{
	using System.Globalization;
	using System.Reflection;
	using System.Resources;

	/// <summary>
	///	This API supports the QueryFramework infrastructure and is not intended to be used
	///	directly from your code. This API may change or be removed in future releases.
	/// </summary>
	public static class MySqlStrings
	{
		private static readonly ResourceManager _resourceManager
			= new ResourceManager("QueryFramework.MySql.Properties.MySqlStrings", typeof(MySqlStrings).GetTypeInfo().Assembly);

		/// <summary>
		/// The provider '{providerName}' not supported combines results 'INTERSECT' and 'MINUS'.
		/// </summary>
		public static string SqlSyntex_NotSupported_CombineResult_Expr_Part(object providerName)
		{
			return string.Format(CultureInfo.CurrentCulture, GetString("SqlSyntex_NotSupported_CombineResult_Expr_Part", "providerName"), providerName);
		}

		/// <summary>
		/// The provider '{providerName}' not supported '{funcName}' function.
		/// </summary>
		public static string SqlSyntex_NotSupported_Expr(object providerName, object funcName)
		{
			return string.Format(CultureInfo.CurrentCulture, GetString("SqlSyntex_NotSupported_Expr", "providerName", "funcName"), providerName, funcName);
		}

		/// <summary>
		/// The provider '{providerName}' not supported 'CROSS JOIN LATERAL'.
		/// </summary>
		public static string SqlSyntex_NotSupported_LateralJoin_Expr(object providerName)
		{
			return string.Format(CultureInfo.CurrentCulture, GetString("SqlSyntex_NotSupported_LateralJoin_Expr", "providerName"), providerName);
		}

		/// <summary>
		/// The provider '{providerName}' not supported multiple grouping sets 'ROLLUP', 'CUBE' and 'GROUPING SETS'.
		/// </summary>
		public static string SqlSyntex_NotSupported_MultipleGroupingSets_Expr(object providerName)
		{
			return string.Format(CultureInfo.CurrentCulture, GetString("SqlSyntex_NotSupported_MultipleGroupingSets_Expr", "providerName"), providerName);
		}

		private static string GetString(string name, params string[] formatterNames)
		{
			var value = _resourceManager.GetString(name);

			if (formatterNames != null)
			{
				for (var i = 0; i < formatterNames.Length; i++)
				{
					value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
				}
			}

			return value;
		}
	}
}
